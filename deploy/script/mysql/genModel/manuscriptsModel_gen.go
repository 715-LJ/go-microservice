// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.2

package genModel

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	manuscriptsFieldNames          = builder.RawFieldNames(&Manuscripts{})
	manuscriptsRows                = strings.Join(manuscriptsFieldNames, ",")
	manuscriptsRowsExpectAutoSet   = strings.Join(stringx.Remove(manuscriptsFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	manuscriptsRowsWithPlaceHolder = strings.Join(stringx.Remove(manuscriptsFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheMesasTestManuscriptsIdPrefix = "cache:mesasTest:manuscripts:id:"
)

type (
	manuscriptsModel interface {
		Insert(ctx context.Context, data *Manuscripts) (sql.Result, error)
		FindOne(ctx context.Context, id uint64) (*Manuscripts, error)
		Update(ctx context.Context, data *Manuscripts) error
		Delete(ctx context.Context, id uint64) error
	}

	defaultManuscriptsModel struct {
		sqlc.CachedConn
		table string
	}

	Manuscripts struct {
		Id                           uint64         `db:"id"`                               // 主键
		ProcessType                  uint64         `db:"process_type"`                     // 流程类型（1普通，2外部编辑）
		Uid                          uint64         `db:"uid"`                              // 投稿用户ID
		CoMeUid                      uint64         `db:"co_me_uid"`                        // Co-ME用户ID
		AeUid                        uint64         `db:"ae_uid"`                           // 助理编辑用户ID
		AcquiringUid                 uint64         `db:"acquiring_uid"`                    // 组稿编辑用户ID
		EditorUid                    uint64         `db:"editor_uid"`                       // editor用户ID
		JournalId                    uint64         `db:"journal_id"`                       // 期刊ID
		Status                       string         `db:"status"`                           // 状态
		Flag                         uint64         `db:"flag"`                             // 进度状态
		SerialId                     string         `db:"serial_id"`                        // 序列号
		SerialIdRule                 uint64         `db:"serial_id_rule"`                   // 序列号规则 1=按年份,2=按天数'
		Title                        sql.NullString `db:"title"`                            // 标题
		TypeId                       uint64         `db:"type_id"`                          // 稿件类型ID
		SourceId                     uint64         `db:"source_id"`                        // 来源ID
		Abstract                     sql.NullString `db:"abstract"`                         // 简介
		Highlight                    sql.NullString `db:"highlight"`                        // 高亮内容
		Keywords                     string         `db:"keywords"`                         // 关键词
		CompoundPdf                  string         `db:"compound_pdf"`                     // 附件合成PDF路径
		CompoundPdfForReview         string         `db:"compound_pdf_for_review"`          // 审稿人附件合成PDF路径
		CompoundRevisionPdf          string         `db:"compound_revision_pdf"`            // 反修附件合成PDF路径
		CompoundRevisionPdfForReview string         `db:"compound_revision_pdf_for_review"` // 反修审稿人附件合成PDF路径
		ManuscriptFile               string         `db:"manuscript_file"`                  // 手稿
		PublicationFee               float64        `db:"publication_fee"`                  // 出版费(美元)
		IsSendApc                    uint64         `db:"is_send_apc"`                      // 是否发送APC
		SendApcAt                    uint64         `db:"send_apc_at"`                      // 发送APC时间
		IsSubmitLicense              uint64         `db:"is_submit_license"`                // 是否提交授权
		OriginalManuscriptId         uint64         `db:"original_manuscript_id"`           // 原稿件ID
		Evaluation                   sql.NullString `db:"evaluation"`                       // 评价信息
		Video                        string         `db:"video"`                            // 视频介绍
		SubmissionAt                 uint64         `db:"submission_at"`                    // 投稿时间
		AcceptedAt                   uint64         `db:"accepted_at"`                      // 接受时间
		PublishedAt                  sql.NullInt64  `db:"published_at"`                     // 发布时间
		RevisionRemindAt             uint64         `db:"revision_remind_at"`               // 反修提醒时间
		OptUid                       uint64         `db:"opt_uid"`
		OperatedAt                   sql.NullInt64  `db:"operated_at"`   // 最后操作时间
		LastActedAt                  uint64         `db:"last_acted_at"` // 最后审稿操作时间
		CreatedAt                    time.Time      `db:"created_at"`    // 创建时间
		UpdatedAt                    sql.NullTime   `db:"updated_at"`    // 更新时间
		DeletedAt                    sql.NullTime   `db:"deleted_at"`    // 删除时间
		IsSyncOrcid                  uint64         `db:"is_sync_orcid"` // 是否同步orcid
	}
)

func newManuscriptsModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultManuscriptsModel {
	return &defaultManuscriptsModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`manuscripts`",
	}
}

func (m *defaultManuscriptsModel) Delete(ctx context.Context, id uint64) error {
	mesasTestManuscriptsIdKey := fmt.Sprintf("%s%v", cacheMesasTestManuscriptsIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, mesasTestManuscriptsIdKey)
	return err
}

func (m *defaultManuscriptsModel) FindOne(ctx context.Context, id uint64) (*Manuscripts, error) {
	mesasTestManuscriptsIdKey := fmt.Sprintf("%s%v", cacheMesasTestManuscriptsIdPrefix, id)
	var resp Manuscripts
	err := m.QueryRowCtx(ctx, &resp, mesasTestManuscriptsIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", manuscriptsRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultManuscriptsModel) Insert(ctx context.Context, data *Manuscripts) (sql.Result, error) {
	mesasTestManuscriptsIdKey := fmt.Sprintf("%s%v", cacheMesasTestManuscriptsIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, manuscriptsRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.ProcessType, data.Uid, data.CoMeUid, data.AeUid, data.AcquiringUid, data.EditorUid, data.JournalId, data.Status, data.Flag, data.SerialId, data.SerialIdRule, data.Title, data.TypeId, data.SourceId, data.Abstract, data.Highlight, data.Keywords, data.CompoundPdf, data.CompoundPdfForReview, data.CompoundRevisionPdf, data.CompoundRevisionPdfForReview, data.ManuscriptFile, data.PublicationFee, data.IsSendApc, data.SendApcAt, data.IsSubmitLicense, data.OriginalManuscriptId, data.Evaluation, data.Video, data.SubmissionAt, data.AcceptedAt, data.PublishedAt, data.RevisionRemindAt, data.OptUid, data.OperatedAt, data.LastActedAt, data.DeletedAt, data.IsSyncOrcid)
	}, mesasTestManuscriptsIdKey)
	return ret, err
}

func (m *defaultManuscriptsModel) Update(ctx context.Context, data *Manuscripts) error {
	mesasTestManuscriptsIdKey := fmt.Sprintf("%s%v", cacheMesasTestManuscriptsIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, manuscriptsRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.ProcessType, data.Uid, data.CoMeUid, data.AeUid, data.AcquiringUid, data.EditorUid, data.JournalId, data.Status, data.Flag, data.SerialId, data.SerialIdRule, data.Title, data.TypeId, data.SourceId, data.Abstract, data.Highlight, data.Keywords, data.CompoundPdf, data.CompoundPdfForReview, data.CompoundRevisionPdf, data.CompoundRevisionPdfForReview, data.ManuscriptFile, data.PublicationFee, data.IsSendApc, data.SendApcAt, data.IsSubmitLicense, data.OriginalManuscriptId, data.Evaluation, data.Video, data.SubmissionAt, data.AcceptedAt, data.PublishedAt, data.RevisionRemindAt, data.OptUid, data.OperatedAt, data.LastActedAt, data.DeletedAt, data.IsSyncOrcid, data.Id)
	}, mesasTestManuscriptsIdKey)
	return err
}

func (m *defaultManuscriptsModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheMesasTestManuscriptsIdPrefix, primary)
}

func (m *defaultManuscriptsModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", manuscriptsRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultManuscriptsModel) tableName() string {
	return m.table
}
